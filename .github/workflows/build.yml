name: Build and Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build & Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v3

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: clippy, rustfmt

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build
      run: cargo build --verbose

    - name: Lint
      run: cargo clippy -- -D warnings

    - name: Format check
      run: cargo fmt -- --check

    - name: Run tests
      run: cargo test --verbose

    - name: Package Binary
      if: matrix.os == 'ubuntu-latest'
      run: |
        cargo build --release
        tar -czvf a-${{ matrix.os }}.tar.gz -C target/release a

    - name: Package Binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cargo build --release
        powershell Compress-Archive -Path target/release/a.exe -DestinationPath a-${{ matrix.os }}.zip

    - name: Package Binary (macOS)
      if: matrix.os == 'macOS-latest'
      run: |
        cargo build --release
        tar -czvf a-${{ matrix.os }}.tar.gz -C target/release a

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: a-${{ matrix.os }}
        path: |
          a-${{ matrix.os }}.tar.gz
          a-${{ matrix.os }}.zip
